{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Nick.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOdIAA6YKKjzprnQ3vCbol6"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"3RyNNJI2nqZO","executionInfo":{"status":"ok","timestamp":1605251634258,"user_tz":-480,"elapsed":1041,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}},"outputId":"979695b6-bed4-4bec-898c-b7c52561812e","colab":{"base_uri":"https://localhost:8080/"}},"source":["!free -h"],"execution_count":null,"outputs":[{"output_type":"stream","text":["              total        used        free      shared  buff/cache   available\n","Mem:            12G        737M        9.9G        936K        2.1G         11G\n","Swap:            0B          0B          0B\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"flcSujyonxhD","executionInfo":{"status":"ok","timestamp":1605642208250,"user_tz":-480,"elapsed":18484,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}},"outputId":"efd407fa-2b62-463c-95c8-d70695a6fca8","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KSkVt8Z0nzHK","executionInfo":{"status":"ok","timestamp":1605642213330,"user_tz":-480,"elapsed":838,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}},"outputId":"13c6027c-77f8-445b-a608-1d4f88ee4cee","colab":{"base_uri":"https://localhost:8080/"}},"source":["# After executing the cell above, Drive\n","# files will be present in \"/content/drive/My Drive\".\n","!ls \"/content/drive/My Drive/Colab_Notebooks\""],"execution_count":2,"outputs":[{"output_type":"stream","text":["17_Question.json\t      2020_Questions_with_Ans.json  user_agents\n","2019_Questions_with_Ans.json  Nick.ipynb\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"YJd1P-Mfn1R6","executionInfo":{"status":"ok","timestamp":1605642223270,"user_tz":-480,"elapsed":7623,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}},"outputId":"acbdf239-5c6c-4c0b-d6cd-5687175e7ec0","colab":{"base_uri":"https://localhost:8080/"}},"source":["!pip install ijson\n","!pip install python-dotenv"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Collecting ijson\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/6b/b4/2116fef38b2e1701403e7a29dec0d9f9fcc31f1fc95b885581a40915e7fe/ijson-3.1.2.post0-cp36-cp36m-manylinux2010_x86_64.whl (127kB)\n","\r\u001b[K     |██▋                             | 10kB 18.9MB/s eta 0:00:01\r\u001b[K     |█████▏                          | 20kB 21.1MB/s eta 0:00:01\r\u001b[K     |███████▊                        | 30kB 15.8MB/s eta 0:00:01\r\u001b[K     |██████████▎                     | 40kB 14.2MB/s eta 0:00:01\r\u001b[K     |████████████▉                   | 51kB 11.5MB/s eta 0:00:01\r\u001b[K     |███████████████▍                | 61kB 12.2MB/s eta 0:00:01\r\u001b[K     |██████████████████              | 71kB 12.9MB/s eta 0:00:01\r\u001b[K     |████████████████████▋           | 81kB 12.4MB/s eta 0:00:01\r\u001b[K     |███████████████████████▏        | 92kB 11.2MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▊      | 102kB 10.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████████▎   | 112kB 10.8MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▉ | 122kB 10.8MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 133kB 10.8MB/s \n","\u001b[?25hInstalling collected packages: ijson\n","Successfully installed ijson-3.1.2.post0\n","Collecting python-dotenv\n","  Downloading https://files.pythonhosted.org/packages/32/2e/e4585559237787966aad0f8fd0fc31df1c4c9eb0e62de458c5b6cde954eb/python_dotenv-0.15.0-py2.py3-none-any.whl\n","Installing collected packages: python-dotenv\n","Successfully installed python-dotenv-0.15.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TFoJdpFgn1qK","executionInfo":{"status":"ok","timestamp":1605642231685,"user_tz":-480,"elapsed":1389,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}}},"source":["#!/usr/bin/python\n","# -*- coding: utf-8 -*-\n","# google search results crawler\n","\n","import sys\n","import os\n","import urllib.request\n","import urllib.error\n","import socket\n","import time\n","import gzip\n","import io\n","import re\n","import random\n","import types\n","from dotenv import load_dotenv, find_dotenv\n","from bs4 import BeautifulSoup\n","from importlib import reload\n","import operator\n","import chardet\n","import string\n","\n","reload(sys)\n","base_url = \"https://www.google.com\"\n","results_per_page = 10\n","user_agents = list()\n","\n","# results from the search engine\n","# basically include url, title,content\n","\n","# 呼叫API\n","class GoogleAPI:\n","    def __init__(self):\n","        timeout = 40\n","        socket.setdefaulttimeout(timeout)\n","\n","    def extractUrl(self, href):\n","        \"\"\" Return a string\n","\n","        extract a url from a link\n","        \"\"\"\n","        url = ''\n","        pattern = re.compile(r'(http[s]?://[^&]+)&', re.U | re.M)\n","        url_match = pattern.search(href)\n","        if(url_match and url_match.lastindex > 0):\n","            url = url_match.group(1)\n","\n","        return url\n","\n","    def extractSearchResults(self, html):\n","        \"\"\"Return a list\n","\n","        extract serach results list from downloaded html file\n","        \"\"\"\n","        \n","        results = list()        \n","        soup = BeautifulSoup(html, 'html.parser')\n","        div = soup.find('div', id='main')\n","        \n","        if (type(div) == type(None)):\n","            div = soup.find('div', id='center_col')\n","        if (type(div) == type(None)):\n","            div = soup.find('body')\n","        if (type(div) != type(None)):\n","            lis = div.findAll('a')            \n","            if(len(lis) > 0):\n","                for link in lis:\n","                    if (type(link) == type(None)):\n","                        continue\n","\n","                    url = link['href']\n","                    url = self.extractUrl(url)\n","                    url = urllib.parse.unquote(urllib.parse.unquote(url, 'gbk'), 'utf-8')\n","                    \n","                    if \"map\" not in url:\n","                        results.append(url)\n","        return results\n","\n","    def search(self, query, lang='zh_tw', num=results_per_page):\n","        \"\"\"Return a list of lists\n","\n","        search web\n","        @param query -> query key words\n","        @param lang -> language of search results\n","        @param num -> number of search results to return\n","        \"\"\"\n","        search_results = list()\n","        query = urllib.request.quote(query)\n","        if(num % results_per_page == 0):\n","            pages = num / results_per_page\n","        else:\n","            pages = num / results_per_page + 1\n","\n","        for p in range(0, int(pages)):\n","            start = p * results_per_page\n","            url = '%s/search?hl=%s&num=%d&start=%s&q=%s' % (\n","                base_url, lang, results_per_page, start, query)\n","\n","            retry = 3\n","            while(retry > 0):\n","                try:\n","                    request = urllib.request.Request(url)\n","                    length = len(user_agents)\n","                    index = random.randint(0, length-1)\n","                    user_agent = user_agents[index]\n","                    request.add_header('User-agent', user_agent)\n","                    request.add_header('connection', 'keep-alive')\n","                    request.add_header('Accept-Encoding', 'gzip')\n","                    request.add_header('referer', base_url)\n","                    response = urllib.request.urlopen(request)\n","                    html = response.read()\n","                    \n","                    if(response.headers.get('content-encoding', None) == 'gzip'):\n","                        html = gzip.GzipFile(\n","                            fileobj=io.BytesIO(html)).read()\n","                                        \n","                    results = self.extractSearchResults(html)\n","                    search_results.extend(results)\n","                    break\n","                except urllib.error.URLError as err1:\n","                    retry = retry - 1\n","                    continue\n","\n","                except Exception as err2:\n","                    retry = retry - 1\n","                    continue\n","        return search_results\n","\n","    def searchContent(self, query, answerA, answerB, answerC, lang='zh_tw', num=results_per_page):\n","        \"\"\"Return a list of lists\n","\n","        search web\n","        @param query -> query key words\n","        @param lang -> language of search results\n","        @param num -> number of search results to return\n","        \"\"\"\n","        search_results = \"\"\n","        query = urllib.request.quote(query, safe=string.printable)\n","        if(num % results_per_page == 0):\n","            pages = num / results_per_page\n","        else:\n","            pages = num / results_per_page + 1\n","\n","        for p in range(0, int(pages)):\n","            start = p * results_per_page\n","            url = query\n","            retry = 1\n","            while(retry > 0):\n","                try:\n","                    request = urllib.request.Request(url)\n","                    length = len(user_agents)\n","                    index = random.randint(0, length-1)\n","                    user_agent = user_agents[index]\n","                    request.add_header('User-agent', user_agent)\n","                    request.add_header('connection', 'keep-alive')\n","                    request.add_header('Accept-Encoding', 'gzip')\n","                    request.add_header('referer', base_url)\n","                    response = urllib.request.urlopen(request)\n","                    html = response.read()\n","                    \n","                    if(response.headers.get('content-encoding', None) == 'gzip'):\n","                        html = gzip.GzipFile(\n","                            fileobj=io.BytesIO(html)).read()\n","                    \n","                    temp = html.decode()\n","\n","                    acount = temp.count(answerA)\n","                    bcount = temp.count(answerB)\n","                    ccount = temp.count(answerC)\n","                    \n","                    def takeSecond(elem):\n","                        return elem[0]\n","                                        \n","                    countList = [(acount, \"A\", answerA), (bcount, \"B\", answerB), (ccount, \"C\", answerC)]                    \n","                    countList.sort(key=takeSecond, reverse=True)\n","                    \n","                    if (countList[0][0] != 0):\n","                        search_results = countList[0][1]\n","                    else:\n","                        acount = temp.count(answerA[0:2])\n","                        bcount = temp.count(answerB[0:2])\n","                        ccount = temp.count(answerC[0:2])\n","                        \n","                        countList = [(acount, \"A\", answerA), (bcount, \"B\", answerB), (ccount, \"C\", answerC)]                    \n","                        countList.sort(key=takeSecond, reverse=True)\n","                        \n","                        if (countList[0][0] != 0):\n","                            search_results = countList[0][1]\n","                    \n","                    # results = self.extractSearchResults(html)\n","                    # search_results.extend(results)\n","                    # search_results.append(html)\n","                    break\n","                except urllib.error.URLError as err1:\n","                    retry = retry - 1\n","                    continue\n","\n","                except Exception as err2:\n","                    retry = retry - 1\n","                    continue\n","        return search_results\n","\n","# 載入AGENT\n","def load_user_agent():\n","    fp = open('/content/drive/My Drive/Colab_Notebooks/user_agents', 'r')\n","\n","    line = fp.readline().strip('\\n')\n","    while(line):\n","        user_agents.append(line)\n","        line = fp.readline().strip('\\n')\n","    fp.close()\n","    \n","############################# 以上是載入網頁內容的程式碼 ########################\n","    \n"," \n","    "],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"G7bpgzCOn28i","executionInfo":{"status":"ok","timestamp":1605642383908,"user_tz":-480,"elapsed":145348,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}},"outputId":"edf1a521-3251-4345-cde0-27e8e1c9fc47","colab":{"base_uri":"https://localhost:8080/"}},"source":["import ijson\n","import threading\n","import queue\n","import jieba\n","import jieba.posseg as pseg\n","import time\n","\n","# 載入辭典\n","#jieba.set_dictionary('dict.txt.big')\n","\n","list_count = []\n","class myThread (threading.Thread):\n","    def __init__(self, threadID, name, counter):\n","        threading.Thread.__init__(self)\n","        self.threadID = threadID\n","        self.name = name\n","        self.counter = counter\n","        \n","    def run(self):\n","        print (\"開始：\" + self.name)\n","\n","        # Load use agent string from file\n","        load_user_agent()\n","\n","        # Create a GoogleAPI instance\n","        api = GoogleAPI()\n","\n","        # set expect search results to be crawled\n","        expect_num = 10\n","        \n","        # 打開JSON檔  EX: 2019_Questions_with_Ans.json 2020_Questions_with_Ans.json\n","        f = open(\"/content/drive/My Drive/Colab_Notebooks/17_Question.json\", encoding = 'UTF-8')\n","        objects = ijson.items(f, 'item')\n","        \n","        # 一個Thread讀10個題目\n","        res = []  \n","        for article in list(objects)[self.counter : self.counter + 10]:\n","            temp = \"\"\n","        \n","            # 將題目分詞性\n","            question = article[\"Question\"]\n","#            articleQ = pseg.cut(article[\"Question\"])\n","#            question = \"\"\n","#            for word in articleQ:\n","#                # 名詞的挑出來\n","#                if (word.flag == \"n\" or word.flag == \"x\"):\n","#                    question = question + word.word + \" \"\n","#                if word.flag == \"m\":\n","#                    question = question + word.word\n","            \n","            # 查出與題目相關的網頁\n","#            print(question)\n","            results = api.search(question[0:32], num=expect_num)\n","            time.sleep(5)\n","                        \n","            for r in results:\n","                # 找出答案\n","#                print(r)\n","                ans = api.searchContent(r, article[\"A\"], article[\"B\"], article[\"C\"])\n","                if ans != \"\":\n","                    temp = ans\n","                    break\n","         \n","            res.append(temp)\n","        \n","        # 印出結果    \n","        list_count.append((self.counter,res))    \n","        print((self.counter, res))\n","\n","        \n","        \n","#final = list()\n","#2019/11/23 新增多執行續\n","i = 0   \n","t_list = []\n","while i < 200: \n","  thread = myThread(i, \"Thread-\" + str(i).zfill(3), i)\n","  t_list.append(thread)\n","  thread2 = myThread(i+10, \"Thread-\" + str(i+10).zfill(3), i+10)\n","  t_list.append(thread2)\n","  i = i + 20  \n","for t in t_list: \n","  t.start()\n","for t in t_list:\n","  t.join()\n","    \n","     \n","\n","       "],"execution_count":5,"outputs":[{"output_type":"stream","text":["開始：Thread-000\n","開始：Thread-010\n","開始：Thread-020\n","開始：Thread-030\n","開始：Thread-040\n","開始：Thread-050\n","開始：Thread-060\n","開始：Thread-070\n","開始：Thread-080\n","開始：Thread-090\n","開始：Thread-100\n","開始：Thread-110\n","開始：Thread-120\n","開始：Thread-130\n","開始：Thread-140\n","開始：Thread-150\n","開始：Thread-160\n","開始：Thread-170\n","開始：Thread-180\n","開始：Thread-190\n","(80, ['C', 'B', 'C', 'B', 'C', 'A', 'C', 'A', 'A', 'A'])\n","(90, ['A', 'A', 'C', 'B', 'A', 'A', 'B', 'B', 'C', 'B'])\n","(30, ['A', 'A', 'A', 'B', 'C', 'B', 'B', 'A', 'A', 'C'])\n","(40, ['A', 'C', 'B', 'C', 'B', 'C', 'C', 'B', 'C', 'B'])\n","(180, ['A', 'B', 'A', 'B', 'B', 'C', 'B', 'B', 'C', 'A'])\n","(0, ['A', 'C', 'B', 'C', 'A', 'C', 'C', 'B', 'B', 'C'])\n","(100, ['B', 'A', 'A', 'A', 'B', 'B', 'A', 'C', 'A', 'B'])\n","(50, ['C', 'A', 'B', 'C', 'C', 'B', 'B', 'B', 'A', 'C'])\n","(170, ['B', 'B', 'A', 'B', 'A', 'C', 'A', 'B', 'C', 'B'])\n","(120, ['B', 'B', 'C', 'A', 'C', 'A', 'B', 'A', 'A', 'A'])\n","(140, ['B', 'A', 'C', 'A', 'C', 'A', 'C', 'B', 'C', 'B'])\n","(110, ['C', 'B', 'A', 'B', 'B', 'B', 'C', 'A', 'A', 'B'])\n","(20, ['B', 'B', 'C', 'C', 'A', 'A', 'A', 'C', 'B', 'B'])\n","(60, ['C', 'C', 'A', 'B', 'C', 'B', 'B', 'B', 'A', 'C'])\n","(70, ['C', 'A', 'A', 'A', 'A', 'C', 'A', 'B', 'C', 'B'])\n","(10, ['C', 'A', 'A', 'B', 'A', 'B', 'A', 'C', 'B', 'B'])\n","(160, ['C', 'A', 'B', 'A', 'A', 'A', 'B', 'B', 'C', 'A'])\n","(150, ['C', 'A', 'B', 'B', 'B', 'B', 'A', 'A', 'A', 'A'])\n","(130, ['C', 'A', 'A', 'A', 'C', 'B', 'A', 'C', 'A', 'A'])\n","(190, ['A', 'A', 'A', 'C', '', 'C', 'A', 'B', 'B', 'B'])\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jPu5FBympzOD","executionInfo":{"status":"ok","timestamp":1605642388565,"user_tz":-480,"elapsed":744,"user":{"displayName":"鄧凱兼","photoUrl":"","userId":"01618965480305466089"}},"outputId":"214d1f0d-d175-461c-ba45-d6d3a5358ee3","colab":{"base_uri":"https://localhost:8080/"}},"source":["## 2019_Questions_with_Ans  2020_Questions_with_Ans 此檔答案在json內\n","\n","# data = open(\"/content/drive/My Drive/Colab_Notebooks/2020_Questions_with_Ans.json\", encoding = \"UTF-8\")\n","# dataObj = ijson.items(data, 'item')\n","# ans = []\n","# for article in list(dataObj)[0:200]:\n","#   ## 2019的範例要改 \"Answer : \"\n","#   ans.append(article[\"Answer\"])\n","# print(ans)\n","\n","\n","## 將答案sorted\n","listTest = list_count\n","newTest = sorted(listTest)\n","# print(newTest)\n","\n","final = []\n","for i in range(0, len(newTest)):\n","  for j in range(0, 10):\n","    \n","    ## [i]:第幾idx的elem ,[1]:elem內的indx 1, [j]:indx 1內的答案\n","    ## EX: [(0, ['B', 'C', 'B', 'A', 'C', 'A', 'A', 'C', 'A', 'B']), (10, ['A',...\n","    final.append(newTest[i][1][j]) \n","\n","# 對答案 for loop\n","# score = 0\n","# for i in range(0, 200):\n","#   if (ans[i] == final[i]):\n","#     score += 0.5\n","\n","# 印出答題程式跑出的答案  最後逗號記得刪除\n","print(\"[ \", end='')\n","for i in final:\n","  print(\"\\\"\" + i + \"\\\"\" + ',',end='')\n","print(\" ]\")\n","# print(\"成績\" + str(score))\n"],"execution_count":6,"outputs":[{"output_type":"stream","textn"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"euwgUdhUn5ei"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HsNouArdqmUk"},"source":[""],"execution_count":null,"outputs":[]}]}